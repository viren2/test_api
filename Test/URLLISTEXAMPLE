


Note :- Kindly share the


Django Python Machine Test

Consider the following scenario where we have 3 entities in our system.

1. Super-Admin
2. Teacher
3. Student
 
We have the number of users registered in our system.
You can use Django’s default admin template to create/register users but not other entities or you can make REST APIs for users as well if you want.
 

You have to perform the following tasks :

Create REST APIs based on Django with PostgreSQL database. It
should contain:
1. User Sign Up/Forgot Password APIs.
2. Uses JWT authentication. 3. Must define 
3 user levels: 1. Super-admin, 2. Teacher, 3. Student (Use
internal Django Groups to achieve the same).
4. Teacher must be able to add/list the students.
5. Admin must be able to add/list every user in the database.
6. Students must be able to see his information only.
7. Code should be commented for clarit
Things to consider :

1. The system has many Super-Admin.
2. The system has many Teacher.
3. A Student show information

 
-------------------------------------------------------------
 
Given are the examples of REST APIs you have to build.
 

List of all clients

GET /Admininfo/
[
    {
        "id": 3,
        "admin_name": "nikhil rajput",
        "user_add": "shubham soni",
        "teacher": "http://127.0.0.1:8000/teacher/4/",
        "student": "http://127.0.0.1:8000/student/5/"
    }
]
    {
        "id": 4,
        "admin_name": "kuldeep sen",
        "user_add": "anand",
        "teacher": "http://127.0.0.1:8000/teacher/4/",
        "student": "http://127.0.0.1:8000/student/6/"
    }
]
-------------------------------------------------------------
 

Create a Teacher to add student

POST /Teacher/
 
[
    {
        "id": 1,
        "teacher_name": "Rajeev",
        "student_add": "shikha  soni",
        "update_date": "2021-12-25T05:31:51.839723Z"
    },
    {
        "id": 2,
        "teacher_name": "Deepak joshi",
        "student_add": "neha soni",
        "update_date": "2021-12-25T05:32:07.535965Z"
    },
    {
        "id": 3,
        "teacher_name": "soni jain",
        "student_add": "Sunil pal",
        "update_date": "2021-12-25T05:37:16.394219Z"
    },
    {
        "id": 4,
        "teacher_name": "mahendra singh",
        "student_add": "sachin",
        "update_date": "2021-12-25T05:38:43.184622Z"
    }
]

Retrieve info of a Student along with  assigned to its Teacher

GET /Student/:id   	
 
[
    {
        "id": 3,
        "student_name": "neha soni",
        "course_name": "commerce",
        "class_name": "11th"
    },
    {
        "id": 4,
        "student_name": "shikha rajput",
        "course_name": "B.tech",
        "class_name": "3rd year"
    },
    {
        "id": 5,
        "student_name": "saloni yadav",
        "course_name": "B.tech",
        "class_name": "4th year"
    },
    {
        "id": 6,
        "student_name": "shivanand",
        "course_name": "polity",
        "class_name": "9th"
    }
]--------------------------------------
 

DELETE /Student/teacher/:id

 

 
------------------------------------------------------------
 

Create a new project

POST clients/:id/projects/
 
Here you do not need to create any new user but assign already registered users.
retrieve teacher id from the url and assign it to a student
 
#super-admin
username= admin@gmail.com
Password =12345



API URL

{
    "admininfo": "http://127.0.0.1:8000/admininfo/",
    "teacher": "http://127.0.0.1:8000/teacher/",
    "student": "http://127.0.0.1:8000/student/"
}

Step-2 url:
Now, we need to authenticate and obtain the token. which we will get at endpoint is

http://127.0.0.1:8000/api/token/

add your user name and password


Step 3 :
copy access token and make a request:
 
  http://127.0.0.1:8000/hello/

